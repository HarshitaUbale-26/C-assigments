 C++ Program to Print "Hello, World!"
// Q1: C++ Program to Print "Hello, World!"
#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World!" << endl;  // Output: Hello, World!
    return 0;
}
Output:

Hello, World!
 2. Program to Take Two Integers as Command Line Arguments and Print Their Sum

// Q2: Program to Take Two Integers as Command Line Arguments and Print Their Sum
#include <iostream>
#include <cstdlib>  // For atoi()
using namespace std;

int main(int argc, char* argv[]) {
    if (argc != 3) {
        cout << "Please provide two integers." << endl;
        return 1;
    }
    int num1 = atoi(argv[1]);
    int num2 = atoi(argv[2]);
    cout << "Sum: " << num1 + num2 << endl;  // Output: Sum: 12
    return 0;
}
Output:


Sum: 12
(If you run with command line: ./program 5 7)

 3. Function Prototype for Factorial Function

// Q3: Function Prototype for a Function that Calculates the Factorial of a Number
long long factorial(int n);  // No Output, just a function prototype
 4. Function to Return Maximum of Three Numbers

// Q4: Function to Return Maximum of Three Numbers
#include <iostream>
using namespace std;

int maxOfThree(int a, int b, int c) {
    return (a > b && a > c) ? a : (b > c ? b : c);  // Output: Maximum of 3, 7, 2 is: 7
}

int main() {
    cout << "Maximum of 3, 7, 2 is: " << maxOfThree(3, 7, 2) << endl;
    return 0;
}
Output:


Maximum of 3, 7, 2 is: 7
 5. Simple Function to Calculate the Area of a Circle

// Q5: Simple Function to Calculate the Area of a Circle
#include <iostream>
using namespace std;

double areaOfCircle(double radius) {
    return 3.14159 * radius * radius;  // Output: Area of circle with radius 5: 78.5398
}

int main() {
    cout << "Area of circle with radius 5: " << areaOfCircle(5) << endl;
    return 0;
}
Output:

Area of circle with radius 5: 78.5398
 6. Function to Return Product of Two Integers

// Q6: Function to Return Product of Two Integers
#include <iostream>
using namespace std;

int multiply(int a, int b) {
    return a * b;  // Output: Product of 4 and 5: 20
}

int main() {
    cout << "Product of 4 and 5: " << multiply(4, 5) << endl;
    return 0;
}
Output:
Product of 4 and 5: 20
 7. Function to Print Elements of an Array

// Q7: Function to Print Elements of an Array
#include <iostream>
using namespace std;

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";  // Output: 1 2 3 4
    }
    cout << endl;
}

int main() {
    int arr[] = {1, 2, 3, 4};
    printArray(arr, 4);
    return 0;
}
Output:
1 2 3 4

 8. Function to Swap Two Integers Using Call by Reference
cpp
Copy
Edit
// Q8: Function to Swap Two Integers Using Call by Reference
#include <iostream>
using namespace std;

void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;  // Output: x: 20, y: 10
}

int main() {
    int x = 10, y = 20;
    swap(x, y);
    cout << "x: " << x << ", y: " << y << endl;
    return 0;
}
Output:
x: 20, y: 10
 9. Function to Increment Integer Value by 10 Using Call by Reference

// Q9: Function to Increment Integer Value by 10 Using Call by Reference
#include <iostream>
using namespace std;

void incrementByTen(int &a) {
    a += 10;  // Output: Updated value: 15
}

int main() {
    int num = 5;
    incrementByTen(num);
    cout << "Updated value: " << num << endl;
    return 0;
}
Output:

Updated value: 15

 10. Function to Modify Array Elements Using Call by Reference

// Q10: Function to Modify Array Elements Using Call by Reference
#include <iostream>
using namespace std;

void modifyArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] += 5;  // Output: 6 7 8
    }
}

int main() {
    int arr[] = {1, 2, 3};
    modifyArray(arr, 3);
    for (int i = 0; i < 3; i++) {
        cout << arr[i] << " ";  // Output: 6 7 8
    }
    cout << endl;
    return 0;
}
Output:

 11. Inline Function to Calculate the Square of a Number

// Q11: Inline Function to Calculate the Square of a Number
#include <iostream>
using namespace std;

inline int square(int x) {
    return x * x;  // Output: Square of 5: 25
}

int main() {
    cout << "Square of 5: " << square(5) << endl;
    return 0;
}
Output:

Square of 5: 25
 12. Inline Function to Return the Cube of a Number
cpp
Copy
Edit
// Q12: Inline Function to Return the Cube of a Number
#include <iostream>
using namespace std;

inline int cube(int x) {
    return x * x * x;  // Output: Cube of 3: 27
}

int main() {
    cout << "Cube of 3: " << cube(3) << endl;
    return 0;
}
Output:

sql
Copy
Edit
Cube of 3: 27
 13. Program to Use Inline Function to Calculate the Sum of Two Numbers
cpp
Copy
Edit
// Q13: Program to Use Inline Function to Calculate the Sum of Two Numbers
#include <iostream>
using namespace std;

inline int sum(int a, int b) {
    return a + b;  // Output: Sum of 4 and 6: 10
}

int main() {
    cout << "Sum of 4 and 6: " << sum(4, 6) << endl;
    return 0;
}
Output:

yaml
Copy
Edit
Sum of 4 and 6: 10
14. Macro to Calculate the Square of a Number
cpp
Copy
Edit
// Q14: Macro to Calculate the Square of a Number
#include <iostream>
using namespace std;

#define SQUARE(x) ((x) * (x))

int main() {
    cout << "Square of 4: " << SQUARE(4) << endl;  // Output: Square of 4: 16
    return 0;
}
Output:


Square of 4: 16
 15. Macro to Find Maximum of Two Numbers and Compare with Inline Function

// Q15: Macro to Find Maximum of Two Numbers and Compare with Inline Function
#include <iostream>
using namespace std;

#define MAX(x, y) ((x) > (y) ? (x) : (y))

inline int max_inline(int x, int y) {
    return (x > y) ? x : y;  // Output: Max using macro: 10, Max using inline function: 10
}

int main() {
    int a = 5, b = 10;
    cout << "Max using macro: " << MAX(a, b) << endl;
    cout << "Max using inline function: " << max_inline(a, b) << endl;
    return 0;
}
Output:
Max using macro: 10
Max using inline function: 10
 16. Overloaded Functions to Calculate Area of Circle, Rectangle, and Triangle

// Q16: Overloaded Functions to Calculate Area of Circle, Rectangle, and Triangle
#include <iostream>
using namespace std;

inline double area(double radius) {
    return 3.14159 * radius * radius;  // Output: Area of circle: 78.5398
}

inline double area(double length, double width) {
    return length * width;  // Output: Area of rectangle: 50
}

inline double area(double base, double height) {
    return 0.5 * base * height;  // Output: Area of triangle: 25
}

int main() {
    cout << "Area of circle: " << area(5) << endl;
    cout << "Area of rectangle: " << area(5, 10) << endl;
    cout << "Area of triangle: " << area(5, 10) << endl;
    return 0;
}
Output:



Area of circle: 78.5398
Area of rectangle: 50
Area of triangle: 25

// Q17: Overloaded Functions to Find the Maximum of Two and Three Numbers
#include <iostream>
using namespace std;

int max(int a, int b) {
    return (a > b) ? a : b;  // Output: Maximum of 3 and 5: 5
}

int max(int a, int b, int c) {
    return (a > b && a > c) ? a : (b > c ? b : c);  // Output: Maximum of 3, 5, 7: 7
}

int main() {
    cout << "Maximum of 3 and 5: " << max(3, 5) << endl;
    cout << "Maximum of 3, 5, and 7: " << max(3, 5, 7) << endl;
    return 0;
}
Output:

yaml
Copy
Edit
Maximum of 3 and 5: 5
Maximum of 3, 5, and 7: 7
 18. Overloaded Functions to Print Different Data Types (int, float, string)
cpp
Copy
Edit
// Q18: Overloaded Functions to Print Different Data Types (int, float, string)
#include <iostream>
#include <string>
using namespace std;

void print(int i) {
    cout << "Integer: " << i << endl;  // Output: Integer: 5
}

void print(float f) {
    cout << "Float: " << f << endl;  // Output: Float: 3.14
}

void print(string s) {
    cout << "String: " << s << endl;  // Output: String: Hello, C++
}

int main() {
    print(5);
    print(3.14f);
    print("Hello, C++");
    return 0;
}
Output:

makefile
Copy
Edit
Integer: 5
Float: 3.14
String: Hello, C++
 19. Function with Default Arguments to Calculate Compound Interest
cpp
Copy
Edit
// Q19: Function with Default Arguments to Calculate Compound Interest
#include <iostream>
#include <cmath>  // For pow function
using namespace std;

double compoundInterest(double principal, double rate = 5.0, int time = 1) {
    return principal * pow((1 + rate / 100), time);  // Output: Compound interest for principal 1000: 1050
}

int main() {
    double principal = 1000;
    cout << "Compound interest for principal 1000: " << compoundInterest(principal) << endl;
    return 0;
}
Output:

yaml
Copy
Edit
Compound interest for principal 1000: 1050
 20. Function with Default Arguments to Print a Greeting Message (default name is "Guest")

// Q20: Function with Default Arguments to Print a Greeting Message (default name is "Guest")
#include <iostream>
using namespace std;

void greet(string name = "Guest") {
    cout << "Hello, " << name << "!" << endl;  // Output: Hello, Guest!
}

int main() {
    greet();  // Output: Hello, Guest!
    greet("Alice");  // Output: Hello, Alice!
    return 0;
}
Output:


Hello, Guest!
Hello, Alice!
 21. Function to Calculate the Power of a Number with a Default Exponent of 2
cpp
Copy
Edit
// Q21: Function to Calculate the Power of a Number with a Default Exponent of 2
#include <iostream>
#include <cmath>  // For pow function
using namespace std;

double power(double base, int exponent = 2) {
    return pow(base, exponent);  // Output: 3 raised to the power 2: 9
}

int main() {
    cout << "3 raised to the power 2: " << power(3) << endl;  // Output: 3 raised to the power 2: 9
    cout << "5 raised to the power 3: " << power(5, 3) << endl;  // Output: 5 raised to the power 3: 125
    return 0;
}
Output:


3 raised to the power 2: 9
5 raised to the power 3: 125
22. Program to Demonstrate the Concept of Recursive Functions

// Q22: Program to Demonstrate the Concept of Recursive Functions
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n == 0) return 1;  // Output: Factorial of 5: 120
    return n * factorial(n - 1);
}

int main() {
    int number = 5;
    cout << "Factorial of " << number << ": " << factorial(number) << endl;
    return 0;
}
Output:

Factorial of 5: 120
23. Program Using an Array of Function Pointers

// Q23: Program Using an Array of Function Pointers
#include <iostream>
using namespace std;

void func1() {
    cout << "Function 1" << endl;  // Output: Function 1
}

void func2() {
    cout << "Function 2" << endl;  // Output: Function 2
}

int main() {
    void (*functions[2])() = {func1, func2};
    functions[0]();  // Output: Function 1
    functions[1]();  // Output: Function 2
    return 0;
}
Output:

javascript
Copy
Edit
Function 1
Function 2
 24. Program to Demonstrate the Use of Function Templates

// Q24: Program to Demonstrate the Use of Function Templates
#include <iostream>
using namespace std;

template <typename T>
T add(T a, T b) {
    return a + b;  // Output: Sum of 3.5 and 2.5: 6
}

int main() {
    cout << "Sum of 3.5 and 2.5: " << add(3.5, 2.5) << endl;
    return 0;
}
Output:


Sum of 3.5 and 2.5: 6
 25. Program to Illustrate the Concept of Function Pointers and Callback Functions

// Q25: Program to Illustrate the Concept of Function Pointers and Callback Functions
#include <iostream>
using namespace std;

void callbackFunc(int x) {
    cout << "Callback function called with value: " << x << endl;  // Output: Callback function called with value: 5
}

void executeCallback(void (*callback)(int), int value) {
    callback(value);  // Output: Callback function called with value: 5
}

int main() {
    executeCallback(callbackFunc, 5);
    return 0;
}
Output:
Callback function called with value: 5
